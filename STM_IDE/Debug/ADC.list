
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004664  08004664  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800466c  0800466c  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
 10 .bss          00000190  2000004c  2000004c  0002004c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0002004c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c62c  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d27  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020853  00000000  00000000  0002fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db4b  00000000  00000000  0005042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9db2  00000000  00000000  0005df76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127d28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034dc  00000000  00000000  00127d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045fc 	.word	0x080045fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	080045fc 	.word	0x080045fc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <Keypad4x4_Init>:
};

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4614      	mov	r4, r2
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Step(2): Find the positions of the 4 OUT pins
	Keypad4x4_FindPins_positions();
 8000cc8:	f000 f85c 	bl	8000d84 <Keypad4x4_FindPins_positions>
	//Step(3): Initialise all pins to set all OUT pins to RESET
	KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	6859      	ldr	r1, [r3, #4]
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <Keypad4x4_Init+0xd8>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2301      	movs	r3, #1
 8000cda:	fa03 f202 	lsl.w	r2, r3, r2
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	6859      	ldr	r1, [r3, #4]
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <Keypad4x4_Init+0xd8>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	fa03 f202 	lsl.w	r2, r3, r2
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	6859      	ldr	r1, [r3, #4]
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <Keypad4x4_Init+0xd8>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	6859      	ldr	r1, [r3, #4]
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <Keypad4x4_Init+0xd8>)
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2301      	movs	r3, #1
 8000d28:	fa03 f202 	lsl.w	r2, r3, r2
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	605a      	str	r2, [r3, #4]
	
	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, GPIO_PIN_SET);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d3a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fdcc 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, GPIO_PIN_SET);
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d4a:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fdc4 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, GPIO_PIN_SET);
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d5a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fdbc 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, GPIO_PIN_SET);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <Keypad4x4_Init+0xd4>)
 8000d6a:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fdb4 	bl	80028dc <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7c:	20000068 	.word	0x20000068
 8000d80:	20000098 	.word	0x20000098

08000d84 <Keypad4x4_FindPins_positions>:
//Function(2): Get pin positions for colomn change use, only for out pins
static void Keypad4x4_FindPins_positions(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e036      	b.n	8000e02 <Keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.OUT0pin>>idx)&0x0001) == 0x0001)
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <Keypad4x4_FindPins_positions+0x94>)
 8000d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d98:	461a      	mov	r2, r3
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	fa42 f303 	asr.w	r3, r2, r3
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <Keypad4x4_FindPins_positions+0x2a>
		{
			OutPositions[0] = idx;
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <Keypad4x4_FindPins_positions+0x98>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.OUT1pin>>idx)&0x0001) == 0x0001)
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <Keypad4x4_FindPins_positions+0x94>)
 8000db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000db2:	461a      	mov	r2, r3
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	fa42 f303 	asr.w	r3, r2, r3
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <Keypad4x4_FindPins_positions+0x44>
		{
			OutPositions[1] = idx;
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <Keypad4x4_FindPins_positions+0x98>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.OUT2pin>>idx)&0x0001) == 0x0001)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <Keypad4x4_FindPins_positions+0x94>)
 8000dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dcc:	461a      	mov	r2, r3
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	fa42 f303 	asr.w	r3, r2, r3
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <Keypad4x4_FindPins_positions+0x5e>
		{
			OutPositions[2] = idx;
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <Keypad4x4_FindPins_positions+0x98>)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.OUT3pin>>idx)&0x0001) == 0x0001)
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <Keypad4x4_FindPins_positions+0x94>)
 8000de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000de6:	461a      	mov	r2, r3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	fa42 f303 	asr.w	r3, r2, r3
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <Keypad4x4_FindPins_positions+0x78>
		{
			OutPositions[3] = idx;
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <Keypad4x4_FindPins_positions+0x98>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d9c5      	bls.n	8000d94 <Keypad4x4_FindPins_positions+0x10>
		}
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000068 	.word	0x20000068
 8000e1c:	20000098 	.word	0x20000098

08000e20 <Keypad4x4_ChangeColomn>:
//Function(3): Change colomn number
static void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d134      	bne.n	8000e9a <Keypad4x4_ChangeColomn+0x7a>
	{
		//Set selected colomn
		KeypadStruct.OUT0_Port->OTYPER &= ~(1UL << OutPositions[0]);
 8000e30:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	6859      	ldr	r1, [r3, #4]
 8000e36:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	43da      	mvns	r2, r3
 8000e42:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	400a      	ands	r2, r1
 8000e48:	605a      	str	r2, [r3, #4]
		
		//Make other colomns floating
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	4b69      	ldr	r3, [pc, #420]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	461a      	mov	r2, r3
 8000e56:	2301      	movs	r3, #1
 8000e58:	fa03 f202 	lsl.w	r2, r3, r2
 8000e5c:	4b65      	ldr	r3, [pc, #404]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2301      	movs	r3, #1
 8000e72:	fa03 f202 	lsl.w	r2, r3, r2
 8000e76:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	6859      	ldr	r1, [r3, #4]
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	fa03 f202 	lsl.w	r2, r3, r2
 8000e90:	4b58      	ldr	r3, [pc, #352]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
		//Make other colomns floating
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
	}
}
 8000e98:	e0a6      	b.n	8000fe8 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==1)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d134      	bne.n	8000f0a <Keypad4x4_ChangeColomn+0xea>
		KeypadStruct.OUT1_Port->OTYPER &= ~(1UL << OutPositions[1]);
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	6859      	ldr	r1, [r3, #4]
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2301      	movs	r3, #1
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000eba:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	fa03 f202 	lsl.w	r2, r3, r2
 8000ecc:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	6859      	ldr	r1, [r3, #4]
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	6859      	ldr	r1, [r3, #4]
 8000ef4:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2301      	movs	r3, #1
 8000efc:	fa03 f202 	lsl.w	r2, r3, r2
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
}
 8000f08:	e06e      	b.n	8000fe8 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==2)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d134      	bne.n	8000f7a <Keypad4x4_ChangeColomn+0x15a>
		KeypadStruct.OUT2_Port->OTYPER &= ~(1UL << OutPositions[2]);
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	6859      	ldr	r1, [r3, #4]
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	400a      	ands	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	6859      	ldr	r1, [r3, #4]
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2301      	movs	r3, #1
 8000f38:	fa03 f202 	lsl.w	r2, r3, r2
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	6859      	ldr	r1, [r3, #4]
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	2301      	movs	r3, #1
 8000f52:	fa03 f202 	lsl.w	r2, r3, r2
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f66:	78db      	ldrb	r3, [r3, #3]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	fa03 f202 	lsl.w	r2, r3, r2
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	605a      	str	r2, [r3, #4]
}
 8000f78:	e036      	b.n	8000fe8 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==3)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d133      	bne.n	8000fe8 <Keypad4x4_ChangeColomn+0x1c8>
		KeypadStruct.OUT3_Port->OTYPER &= ~(1UL << OutPositions[3]);
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	6859      	ldr	r1, [r3, #4]
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f88:	78db      	ldrb	r3, [r3, #3]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	43da      	mvns	r2, r3
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	400a      	ands	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	fa03 f202 	lsl.w	r2, r3, r2
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	fa03 f202 	lsl.w	r2, r3, r2
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <Keypad4x4_ChangeColomn+0x1d8>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2301      	movs	r3, #1
 8000fdc:	fa03 f202 	lsl.w	r2, r3, r2
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000068 	.word	0x20000068
 8000ff8:	20000098 	.word	0x20000098

08000ffc <Keypad4x4_ReadKeypad>:

//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[16])
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ff0b 	bl	8000e20 <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800100a:	4b95      	ldr	r3, [pc, #596]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a94      	ldr	r2, [pc, #592]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001010:	8c12      	ldrh	r2, [r2, #32]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fc49 	bl	80028ac <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2da      	uxtb	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800102a:	4b8d      	ldr	r3, [pc, #564]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a8c      	ldr	r2, [pc, #560]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001030:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fc39 	bl	80028ac <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	2a00      	cmp	r2, #0
 8001044:	bf14      	ite	ne
 8001046:	2201      	movne	r2, #1
 8001048:	2200      	moveq	r2, #0
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800104e:	4b84      	ldr	r3, [pc, #528]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4a83      	ldr	r2, [pc, #524]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001054:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fc27 	bl	80028ac <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3308      	adds	r3, #8
 8001066:	2a00      	cmp	r2, #0
 8001068:	bf14      	ite	ne
 800106a:	2201      	movne	r2, #1
 800106c:	2200      	moveq	r2, #0
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8001072:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	4a7a      	ldr	r2, [pc, #488]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001078:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fc15 	bl	80028ac <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	330c      	adds	r3, #12
 800108a:	2a00      	cmp	r2, #0
 800108c:	bf14      	ite	ne
 800108e:	2201      	movne	r2, #1
 8001090:	2200      	moveq	r2, #0
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fec2 	bl	8000e20 <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800109c:	4b70      	ldr	r3, [pc, #448]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6f      	ldr	r2, [pc, #444]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80010a2:	8c12      	ldrh	r2, [r2, #32]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fc00 	bl	80028ac <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3301      	adds	r3, #1
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2201      	movne	r2, #1
 80010ba:	2200      	moveq	r2, #0
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80010c0:	4b67      	ldr	r3, [pc, #412]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a66      	ldr	r2, [pc, #408]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80010c6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fbee 	bl	80028ac <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3305      	adds	r3, #5
 80010d8:	2a00      	cmp	r2, #0
 80010da:	bf14      	ite	ne
 80010dc:	2201      	movne	r2, #1
 80010de:	2200      	moveq	r2, #0
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80010e4:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a5d      	ldr	r2, [pc, #372]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80010ea:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fbdc 	bl	80028ac <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3309      	adds	r3, #9
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	bf14      	ite	ne
 8001100:	2201      	movne	r2, #1
 8001102:	2200      	moveq	r2, #0
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a54      	ldr	r2, [pc, #336]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800110e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fbca 	bl	80028ac <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	330d      	adds	r3, #13
 8001120:	2a00      	cmp	r2, #0
 8001122:	bf14      	ite	ne
 8001124:	2201      	movne	r2, #1
 8001126:	2200      	moveq	r2, #0
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fe77 	bl	8000e20 <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8001132:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001138:	8c12      	ldrh	r2, [r2, #32]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fbb5 	bl	80028ac <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3302      	adds	r3, #2
 800114a:	2a00      	cmp	r2, #0
 800114c:	bf14      	ite	ne
 800114e:	2201      	movne	r2, #1
 8001150:	2200      	moveq	r2, #0
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8001156:	4b42      	ldr	r3, [pc, #264]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a41      	ldr	r2, [pc, #260]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800115c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fba3 	bl	80028ac <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3306      	adds	r3, #6
 800116e:	2a00      	cmp	r2, #0
 8001170:	bf14      	ite	ne
 8001172:	2201      	movne	r2, #1
 8001174:	2200      	moveq	r2, #0
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001180:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fb91 	bl	80028ac <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	330a      	adds	r3, #10
 8001192:	2a00      	cmp	r2, #0
 8001194:	bf14      	ite	ne
 8001196:	2201      	movne	r2, #1
 8001198:	2200      	moveq	r2, #0
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011a4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fb7f 	bl	80028ac <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	330e      	adds	r3, #14
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2201      	movne	r2, #1
 80011bc:	2200      	moveq	r2, #0
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f7ff fe2c 	bl	8000e20 <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a24      	ldr	r2, [pc, #144]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011ce:	8c12      	ldrh	r2, [r2, #32]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fb6a 	bl	80028ac <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3303      	adds	r3, #3
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2201      	movne	r2, #1
 80011e6:	2200      	moveq	r2, #0
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 80011f2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fb58 	bl	80028ac <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3307      	adds	r3, #7
 8001204:	2a00      	cmp	r2, #0
 8001206:	bf14      	ite	ne
 8001208:	2201      	movne	r2, #1
 800120a:	2200      	moveq	r2, #0
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001216:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb46 	bl	80028ac <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	330b      	adds	r3, #11
 8001228:	2a00      	cmp	r2, #0
 800122a:	bf14      	ite	ne
 800122c:	2201      	movne	r2, #1
 800122e:	2200      	moveq	r2, #0
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <Keypad4x4_ReadKeypad+0x264>)
 800123a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fb34 	bl	80028ac <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	330f      	adds	r3, #15
 800124c:	2a00      	cmp	r2, #0
 800124e:	bf14      	ite	ne
 8001250:	2201      	movne	r2, #1
 8001252:	2200      	moveq	r2, #0
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
}	
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000068 	.word	0x20000068

08001264 <Keypad4x4_GetChar>:
//Function(5): Get character
char* Keypad4x4_GetChar(uint8_t keypadSw)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	return Keypad_keys[keypadSw];
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <Keypad4x4_GetChar+0x20>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000

08001288 <BUZZER_Init>:
  * @brief Initialize timer with PWM-output
  * @note The timer handler and channel should be defined in .h file
  * @retval No
  */
void BUZZER_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
#if(BUZZER_PASSIVE)
	  HAL_TIM_PWM_Start(TIM_BUZZER_HANDLER, TIM_BUZZER_CHANNEL);
 800128c:	2104      	movs	r1, #4
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <BUZZER_Init+0x10>)
 8001290:	f002 fbaa 	bl	80039e8 <HAL_TIM_PWM_Start>
#endif
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000144 	.word	0x20000144
 800129c:	00000000 	.word	0x00000000

080012a0 <BUZZER_PWM_SetPercent>:
  * @note No need init
  * @param 0%-100%
  * @retval No
  */
void BUZZER_PWM_SetPercent(uint8_t percent)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	/* Check range */
	if(percent > 100){
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <BUZZER_PWM_SetPercent+0x14>
		percent = 100;
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	71fb      	strb	r3, [r7, #7]
	}
#if(BUZZER_PASSIVE)

	uint16_t tim_arr = __HAL_TIM_GET_AUTORELOAD(TIM_BUZZER_HANDLER);
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <BUZZER_PWM_SetPercent+0x60>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	81fb      	strh	r3, [r7, #14]

	uint16_t tim_ccr_new = (percent*tim_arr*0.01);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	89fa      	ldrh	r2, [r7, #14]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8d1 	bl	800046c <__aeabi_i2d>
 80012ca:	a30b      	add	r3, pc, #44	; (adr r3, 80012f8 <BUZZER_PWM_SetPercent+0x58>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f936 	bl	8000540 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fb42 	bl	8000964 <__aeabi_d2uiz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(TIM_BUZZER_HANDLER, TIM_BUZZER_CHANNEL, tim_ccr_new);
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <BUZZER_PWM_SetPercent+0x60>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	89ba      	ldrh	r2, [r7, #12]
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
#endif

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	3f847ae1 	.word	0x3f847ae1
 8001300:	20000144 	.word	0x20000144

08001304 <BUZZER_On>:
  * @note No need init
  * @param No
  * @retval No
  */
void BUZZER_On(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

#if(BUZZER_PASSIVE)

	BUZZER_PWM_SetPercent(50);
 8001308:	2032      	movs	r0, #50	; 0x32
 800130a:	f7ff ffc9 	bl	80012a0 <BUZZER_PWM_SetPercent>
	/* For buzzer with generator,  Low Level = BuzzerOn */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
#endif
#endif

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <BUZZER_Off>:
  * @note No need init
  * @param No
  * @retval No
  */
void BUZZER_Off(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
#if(BUZZER_PASSIVE)

	BUZZER_PWM_SetPercent(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffc2 	bl	80012a0 <BUZZER_PWM_SetPercent>
#else
	/* For buzzer with generator,  High Level = BuzzerOff */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
#endif
#endif
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <BUZZER_Go>:
  * @note No need init
  * @param time between ticks in ms, ticks quantity
  * @retval No
  */
void BUZZER_Go(buztime_t period, buztick_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	BUZZER_On();
 800132c:	f7ff ffea 	bl	8001304 <BUZZER_On>
	Buz.Help = 0;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <BUZZER_Go+0x34>)
 8001332:	2200      	movs	r2, #0
 8001334:	715a      	strb	r2, [r3, #5]
	Buz.ToutSave = period;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <BUZZER_Go+0x34>)
 800133c:	805a      	strh	r2, [r3, #2]
	Buz.Tout = period;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <BUZZER_Go+0x34>)
 8001344:	801a      	strh	r2, [r3, #0]
	Buz.Tick = ticks;
 8001346:	4a03      	ldr	r2, [pc, #12]	; (8001354 <BUZZER_Go+0x34>)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	7113      	strb	r3, [r2, #4]
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000009c 	.word	0x2000009c

08001358 <BUZZER_Handler>:
  * @note Insert func.in the 1kHz interrupt handler (e.g. SysTick)
  * @param No
  * @retval No
  */
void BUZZER_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	if(Buz.Tick)
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <BUZZER_Handler+0x58>)
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d022      	beq.n	80013aa <BUZZER_Handler+0x52>
	{
		if(--Buz.Tout <= 0)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <BUZZER_Handler+0x58>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <BUZZER_Handler+0x58>)
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <BUZZER_Handler+0x58>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d118      	bne.n	80013aa <BUZZER_Handler+0x52>
		{
			Buz.Tick--;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <BUZZER_Handler+0x58>)
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <BUZZER_Handler+0x58>)
 8001382:	711a      	strb	r2, [r3, #4]

			if(Buz.Help)
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <BUZZER_Handler+0x58>)
 8001386:	795b      	ldrb	r3, [r3, #5]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <BUZZER_Handler+0x3a>
			{
				BUZZER_On();
 800138c:	f7ff ffba 	bl	8001304 <BUZZER_On>
 8001390:	e001      	b.n	8001396 <BUZZER_Handler+0x3e>
			}
			else
			{
				BUZZER_Off();
 8001392:	f7ff ffbe 	bl	8001312 <BUZZER_Off>
			}

			Buz.Tout = Buz.ToutSave;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <BUZZER_Handler+0x58>)
 8001398:	885a      	ldrh	r2, [r3, #2]
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <BUZZER_Handler+0x58>)
 800139c:	801a      	strh	r2, [r3, #0]

			/* Toggle */
			Buz.Help = ~Buz.Help;
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <BUZZER_Handler+0x58>)
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <BUZZER_Handler+0x58>)
 80013a8:	715a      	strb	r2, [r3, #5]
		}
	}
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000009c 	.word	0x2000009c
 80013b4:	00000000 	.word	0x00000000

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b097      	sub	sp, #92	; 0x5c
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 Keypad_WiresTypeDef myKeypadStruc;
 GPIO_InitTypeDef GPIO_InitStruct;
 	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <main+0x298>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4aa2      	ldr	r2, [pc, #648]	; (8001650 <main+0x298>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <main+0x298>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 	GPIO_InitStruct.Pin = GPIO_PIN_4; //pc4--sda
 80013da:	2310      	movs	r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
 	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	4898      	ldr	r0, [pc, #608]	; (8001654 <main+0x29c>)
 80013f2:	f001 f8bf 	bl	8002574 <HAL_GPIO_Init>


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b95      	ldr	r3, [pc, #596]	; (8001650 <main+0x298>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a94      	ldr	r2, [pc, #592]	; (8001650 <main+0x298>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b92      	ldr	r3, [pc, #584]	; (8001650 <main+0x298>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_15; //PA4 RESET
 8001412:	f248 0310 	movw	r3, #32784	; 0x8010
 8001416:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	488b      	ldr	r0, [pc, #556]	; (8001658 <main+0x2a0>)
 800142c:	f001 f8a2 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 ff24 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f9b6 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f000 fb18 	bl	8001a6c <MX_GPIO_Init>
  MX_TIM1_Init();
 800143c:	f000 fa50 	bl	80018e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001440:	f000 fa9e 	bl	8001980 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001444:	f000 fa16 	bl	8001874 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myKeypadStruc.IN0_Port = GPIOD;
 8001448:	4b84      	ldr	r3, [pc, #528]	; (800165c <main+0x2a4>)
 800144a:	623b      	str	r3, [r7, #32]
  myKeypadStruc.IN1_Port = GPIOD;
 800144c:	4b83      	ldr	r3, [pc, #524]	; (800165c <main+0x2a4>)
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  myKeypadStruc.IN2_Port = GPIOD;
 8001450:	4b82      	ldr	r3, [pc, #520]	; (800165c <main+0x2a4>)
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  myKeypadStruc.IN3_Port = GPIOD;
 8001454:	4b81      	ldr	r3, [pc, #516]	; (800165c <main+0x2a4>)
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c

  myKeypadStruc.OUT0_Port= GPIOD;
 8001458:	4b80      	ldr	r3, [pc, #512]	; (800165c <main+0x2a4>)
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  myKeypadStruc.OUT1_Port= GPIOD;
 800145c:	4b7f      	ldr	r3, [pc, #508]	; (800165c <main+0x2a4>)
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  myKeypadStruc.OUT2_Port= GPIOD;
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <main+0x2a4>)
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
  myKeypadStruc.OUT3_Port= GPIOD;
 8001464:	4b7d      	ldr	r3, [pc, #500]	; (800165c <main+0x2a4>)
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c

  myKeypadStruc.IN0pin= GPIO_PIN_0;
 8001468:	2301      	movs	r3, #1
 800146a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  myKeypadStruc.IN1pin= GPIO_PIN_1;
 800146e:	2302      	movs	r3, #2
 8001470:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  myKeypadStruc.IN2pin= GPIO_PIN_2;
 8001474:	2304      	movs	r3, #4
 8001476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  myKeypadStruc.IN3pin= GPIO_PIN_3;
 800147a:	2308      	movs	r3, #8
 800147c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

  myKeypadStruc.OUT0pin= GPIO_PIN_4;
 8001480:	2310      	movs	r3, #16
 8001482:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  myKeypadStruc.OUT1pin= GPIO_PIN_5;
 8001486:	2320      	movs	r3, #32
 8001488:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  myKeypadStruc.OUT2pin= GPIO_PIN_6;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  myKeypadStruc.OUT3pin= GPIO_PIN_7;
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


 Keypad4x4_Init(&myKeypadStruc);
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc03 	bl	8000ca8 <Keypad4x4_Init>
  HAL_TIM_Base_Start(&htim1);
 80014a2:	486f      	ldr	r0, [pc, #444]	; (8001660 <main+0x2a8>)
 80014a4:	f002 f9de 	bl	8003864 <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4869      	ldr	r0, [pc, #420]	; (8001654 <main+0x29c>)
 80014b0:	f001 fa14 	bl	80028dc <HAL_GPIO_WritePin>
 // lcd16x2_init_4bits(RS_GPIO_Port, RS_Pin, E_Pin,D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
  /* USER CODE END 2 */
   BUZZER_Init();
 80014b4:	f7ff fee8 	bl	8001288 <BUZZER_Init>
   MFRC522_Init();
 80014b8:	f000 fc40 	bl	8001d3c <MFRC522_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	4864      	ldr	r0, [pc, #400]	; (8001654 <main+0x29c>)
 80014c4:	f001 fa0a 	bl	80028dc <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80014c8:	4b65      	ldr	r3, [pc, #404]	; (8001660 <main+0x2a8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80014d0:	bf00      	nop
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <main+0x2a8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d9fa      	bls.n	80014d2 <main+0x11a>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e2:	485c      	ldr	r0, [pc, #368]	; (8001654 <main+0x29c>)
 80014e4:	f001 f9fa 	bl	80028dc <HAL_GPIO_WritePin>

  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80014e8:	f000 ff2e 	bl	8002348 <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <main+0x2ac>)
 80014f0:	6013      	str	r3, [r2, #0]
  // wait for the echo pin to go high
  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80014f2:	bf00      	nop
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	4856      	ldr	r0, [pc, #344]	; (8001654 <main+0x29c>)
 80014fa:	f001 f9d7 	bl	80028ac <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <main+0x15e>
 8001504:	4b57      	ldr	r3, [pc, #348]	; (8001664 <main+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f103 040a 	add.w	r4, r3, #10
 800150c:	f000 ff1c 	bl	8002348 <HAL_GetTick>
 8001510:	4603      	mov	r3, r0
 8001512:	429c      	cmp	r4, r3
 8001514:	d8ee      	bhi.n	80014f4 <main+0x13c>
  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <main+0x2a8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <main+0x2b0>)
 800151e:	6013      	str	r3, [r2, #0]

  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001520:	f000 ff12 	bl	8002348 <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <main+0x2ac>)
 8001528:	6013      	str	r3, [r2, #0]
  // wait for the echo pin to go low
  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 800152a:	bf00      	nop
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	4848      	ldr	r0, [pc, #288]	; (8001654 <main+0x29c>)
 8001532:	f001 f9bb 	bl	80028ac <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <main+0x196>
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <main+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001544:	f000 ff00 	bl	8002348 <HAL_GetTick>
 8001548:	4603      	mov	r3, r0
 800154a:	429c      	cmp	r4, r3
 800154c:	d8ee      	bhi.n	800152c <main+0x174>
  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <main+0x2a8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	4a45      	ldr	r2, [pc, #276]	; (800166c <main+0x2b4>)
 8001556:	6013      	str	r3, [r2, #0]

  Distance = (Value2-Value1)* 0.034/2;
 8001558:	4b44      	ldr	r3, [pc, #272]	; (800166c <main+0x2b4>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <main+0x2b0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff72 	bl	800044c <__aeabi_ui2d>
 8001568:	a337      	add	r3, pc, #220	; (adr r3, 8001648 <main+0x290>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe ffe7 	bl	8000540 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001582:	f7ff f907 	bl	8000794 <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff f9e9 	bl	8000964 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <main+0x2b8>)
 8001598:	801a      	strh	r2, [r3, #0]

  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800159a:	4936      	ldr	r1, [pc, #216]	; (8001674 <main+0x2bc>)
 800159c:	2026      	movs	r0, #38	; 0x26
 800159e:	f000 fcc4 	bl	8001f2a <MFRC522_Request>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <main+0x2c0>)
 80015a8:	701a      	strb	r2, [r3, #0]
 	  		status = MFRC522_Anticoll(str);	//Take a collision, look up 5 bytes
 80015aa:	4832      	ldr	r0, [pc, #200]	; (8001674 <main+0x2bc>)
 80015ac:	f000 fce2 	bl	8001f74 <MFRC522_Anticoll>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <main+0x2c0>)
 80015b6:	701a      	strb	r2, [r3, #0]
 	  		memcpy(serNum, str, 5);	//function for c language:(para1:that place save data,para2:the the source of data,para3:size)
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <main+0x2c4>)
 80015ba:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <main+0x2bc>)
 80015bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c0:	6018      	str	r0, [r3, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	7019      	strb	r1, [r3, #0]
 	  		if (status == MI_OK) {
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <main+0x2c0>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11a      	bne.n	8001604 <main+0x24c>
 	  //*******************************Read and write on block tag*************************//
 	  if ((str[0] ==67) && (str[1] == 177) && (str[2] == 202) && (str[3] == 18) && (str[4] == 42)) {
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <main+0x2bc>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b43      	cmp	r3, #67	; 0x43
 80015d4:	d113      	bne.n	80015fe <main+0x246>
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <main+0x2bc>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	2bb1      	cmp	r3, #177	; 0xb1
 80015dc:	d10f      	bne.n	80015fe <main+0x246>
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <main+0x2bc>)
 80015e0:	789b      	ldrb	r3, [r3, #2]
 80015e2:	2bca      	cmp	r3, #202	; 0xca
 80015e4:	d10b      	bne.n	80015fe <main+0x246>
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <main+0x2bc>)
 80015e8:	78db      	ldrb	r3, [r3, #3]
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d107      	bne.n	80015fe <main+0x246>
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <main+0x2bc>)
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	2b2a      	cmp	r3, #42	; 0x2a
 80015f4:	d103      	bne.n	80015fe <main+0x246>
 		  check =1 ;
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <main+0x2c8>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e002      	b.n	8001604 <main+0x24c>
 	  }
 	  else check=0;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <main+0x2c8>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 	  }
  if (Distance < 10 && check == 0) {
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <main+0x2b8>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	2b09      	cmp	r3, #9
 800160a:	f200 80ac 	bhi.w	8001766 <main+0x3ae>
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <main+0x2c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80a7 	bne.w	8001766 <main+0x3ae>
      HAL_GPIO_WritePin(Dioda_GPIO_Port, Dioda_Pin, 1);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <main+0x29c>)
 8001620:	f001 f95c 	bl	80028dc <HAL_GPIO_WritePin>
      BUZZER_Go(TBUZ_200, TICK_12);
 8001624:	21ef      	movs	r1, #239	; 0xef
 8001626:	20c8      	movs	r0, #200	; 0xc8
 8001628:	f7ff fe7a 	bl	8001320 <BUZZER_Go>


      uint8_t keyIndex = 0;  // Index for the key array
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      while (HAL_GPIO_ReadPin(Dioda_GPIO_Port, Dioda_Pin) == GPIO_PIN_SET) {
 8001632:	e08e      	b.n	8001752 <main+0x39a>

    	  Keypad4x4_ReadKeypad(mySwitches);// Infinite loop until the password is checked
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <main+0x2cc>)
 8001636:	f7ff fce1 	bl	8000ffc <Keypad4x4_ReadKeypad>
          uint8_t buttonPressed = 0;  // Flag to track if a button is pressed
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

          for (uint8_t i = 0; i < 16; i++) {
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001646:	e040      	b.n	80016ca <main+0x312>
 8001648:	b020c49c 	.word	0xb020c49c
 800164c:	3fa16872 	.word	0x3fa16872
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020c00 	.word	0x40020c00
 8001660:	200000fc 	.word	0x200000fc
 8001664:	2000018c 	.word	0x2000018c
 8001668:	20000190 	.word	0x20000190
 800166c:	20000194 	.word	0x20000194
 8001670:	20000198 	.word	0x20000198
 8001674:	2000019c 	.word	0x2000019c
 8001678:	2000019a 	.word	0x2000019a
 800167c:	200001ac 	.word	0x200001ac
 8001680:	200001b4 	.word	0x200001b4
 8001684:	200001b8 	.word	0x200001b8
              if (mySwitches[i]) {
 8001688:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800168c:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <main+0x3cc>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <main+0x308>
                  key[keyIndex++] = Keypad4x4_GetChar(i);
 8001694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 800169e:	461c      	mov	r4, r3
 80016a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fddd 	bl	8001264 <Keypad4x4_GetChar>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a36      	ldr	r2, [pc, #216]	; (8001788 <main+0x3d0>)
 80016ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
                  HAL_Delay(500);
 80016b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b6:	f000 fe53 	bl	8002360 <HAL_Delay>
                 buttonPressed = 1;  // Set the flag to indicate a button is pressed
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
          for (uint8_t i = 0; i < 16; i++) {
 80016c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016c4:	3301      	adds	r3, #1
 80016c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80016ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	d9da      	bls.n	8001688 <main+0x2d0>
              }
          }

          if (buttonPressed) {
 80016d2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03b      	beq.n	8001752 <main+0x39a>
              if (keyIndex==4 && key[0] == 0x8004614   && key[1] == 0x8004618   && key[2] == 0x8004624     && key[3] == 0x800464c) {
 80016da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d122      	bne.n	8001728 <main+0x370>
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <main+0x3d0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a29      	ldr	r2, [pc, #164]	; (800178c <main+0x3d4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d11d      	bne.n	8001728 <main+0x370>
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <main+0x3d0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <main+0x3d8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d118      	bne.n	8001728 <main+0x370>
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <main+0x3d0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <main+0x3dc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d113      	bne.n	8001728 <main+0x370>
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <main+0x3d0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <main+0x3e0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10e      	bne.n	8001728 <main+0x370>
                  HAL_GPIO_WritePin(Dioda_GPIO_Port, Dioda_Pin, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001710:	4822      	ldr	r0, [pc, #136]	; (800179c <main+0x3e4>)
 8001712:	f001 f8e3 	bl	80028dc <HAL_GPIO_WritePin>
                  BUZZER_Go(TBUZ_20, TICK_1);
 8001716:	2100      	movs	r1, #0
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fe01 	bl	8001320 <BUZZER_Go>
                  BUZZER_Off();
 800171e:	f7ff fdf8 	bl	8001312 <BUZZER_Off>
                  HAL_Delay(200);
 8001722:	20c8      	movs	r0, #200	; 0xc8
 8001724:	f000 fe1c 	bl	8002360 <HAL_Delay>
              }

              if (keyIndex >= 4) {
 8001728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800172c:	2b03      	cmp	r3, #3
 800172e:	d910      	bls.n	8001752 <main+0x39a>
            	  for(auto k=0;k<4;k++)key[k]=0;
 8001730:	2300      	movs	r3, #0
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
 8001734:	e007      	b.n	8001746 <main+0x38e>
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <main+0x3d0>)
 8001738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173a:	2100      	movs	r1, #0
 800173c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001742:	3301      	adds	r3, #1
 8001744:	653b      	str	r3, [r7, #80]	; 0x50
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	2b03      	cmp	r3, #3
 800174a:	ddf4      	ble.n	8001736 <main+0x37e>
                  keyIndex = 0;  // Reset the key index if the password is incorrect
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      while (HAL_GPIO_ReadPin(Dioda_GPIO_Port, Dioda_Pin) == GPIO_PIN_SET) {
 8001752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <main+0x3e4>)
 8001758:	f001 f8a8 	bl	80028ac <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	f43f af68 	beq.w	8001634 <main+0x27c>
  if (Distance < 10 && check == 0) {
 8001764:	e00a      	b.n	800177c <main+0x3c4>
              }
          }
      }
  }
 else if(check==1){
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <main+0x3e8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d106      	bne.n	800177c <main+0x3c4>
 HAL_Delay(5000);
 800176e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001772:	f000 fdf5 	bl	8002360 <HAL_Delay>
 check =0;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <main+0x3e8>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
  }

  HAL_Delay(50);
 800177c:	2032      	movs	r0, #50	; 0x32
 800177e:	f000 fdef 	bl	8002360 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001782:	e69b      	b.n	80014bc <main+0x104>
 8001784:	200001b8 	.word	0x200001b8
 8001788:	200001c8 	.word	0x200001c8
 800178c:	08004614 	.word	0x08004614
 8001790:	08004618 	.word	0x08004618
 8001794:	08004624 	.word	0x08004624
 8001798:	0800464c 	.word	0x0800464c
 800179c:	40020800 	.word	0x40020800
 80017a0:	200001b4 	.word	0x200001b4

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b094      	sub	sp, #80	; 0x50
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	2230      	movs	r2, #48	; 0x30
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ff1a 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <SystemClock_Config+0xc8>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a26      	ldr	r2, [pc, #152]	; (800186c <SystemClock_Config+0xc8>)
 80017d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <SystemClock_Config+0xc8>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <SystemClock_Config+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <SystemClock_Config+0xcc>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <SystemClock_Config+0xcc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	2310      	movs	r3, #16
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001814:	2308      	movs	r3, #8
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001818:	2348      	movs	r3, #72	; 0x48
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001820:	2304      	movs	r3, #4
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f001 f871 	bl	8002910 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001834:	f000 f9ca 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2102      	movs	r1, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fad3 	bl	8002e00 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001860:	f000 f9b4 	bl	8001bcc <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3750      	adds	r7, #80	; 0x50
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_SPI1_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <MX_SPI1_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a8:	2210      	movs	r2, #16
 80018aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c6:	f001 fc87 	bl	80031d8 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 f97c 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000a4 	.word	0x200000a4
 80018dc:	40013000 	.word	0x40013000

080018e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <MX_TIM1_Init+0x98>)
 80018fe:	4a1f      	ldr	r2, [pc, #124]	; (800197c <MX_TIM1_Init+0x9c>)
 8001900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM1_Init+0x98>)
 8001904:	2247      	movs	r2, #71	; 0x47
 8001906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_TIM1_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM1_Init+0x98>)
 8001910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM1_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_TIM1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_TIM1_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_TIM1_Init+0x98>)
 800192a:	f001 ff4b 	bl	80037c4 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001934:	f000 f94a 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM1_Init+0x98>)
 8001946:	f002 f9d9 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001950:	f000 f93c 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM1_Init+0x98>)
 8001962:	f002 fda3 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800196c:	f000 f92e 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000fc 	.word	0x200000fc
 800197c:	40010000 	.word	0x40010000

08001980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019ba:	2223      	movs	r2, #35	; 0x23
 80019bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019da:	f001 fef3 	bl	80037c4 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019e4:	f000 f8f2 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019f6:	f002 f981 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a00:	f000 f8e4 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a06:	f001 ff95 	bl	8003934 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a10:	f000 f8dc 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a24:	f002 fd42 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a2e:	f000 f8cd 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2204      	movs	r2, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a4a:	f002 f895 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a54:	f000 f8ba 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a5a:	f000 fb6f 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001a5e:	bf00      	nop
 8001a60:	3738      	adds	r7, #56	; 0x38
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000144 	.word	0x20000144

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a43      	ldr	r2, [pc, #268]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|E_Pin|GPIO_PIN_10|Dioda_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 51a6 	mov.w	r1, #5312	; 0x14c0
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_GPIO_Init+0x14c>)
 8001b16:	f000 fee1 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	21f0      	movs	r1, #240	; 0xf0
 8001b1e:	4827      	ldr	r0, [pc, #156]	; (8001bbc <MX_GPIO_Init+0x150>)
 8001b20:	f000 fedc 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <MX_GPIO_Init+0x14c>)
 8001b3c:	f000 fd1a 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 Dioda_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Dioda_Pin;
 8001b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <MX_GPIO_Init+0x14c>)
 8001b5a:	f000 fd0b 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_GPIO_Init+0x14c>)
 8001b74:	f000 fcfe 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b78:	230f      	movs	r3, #15
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <MX_GPIO_Init+0x150>)
 8001b8c:	f000 fcf2 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b90:	23f0      	movs	r3, #240	; 0xf0
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_GPIO_Init+0x150>)
 8001ba8:	f000 fce4 	bl	8002574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void  HAL_SYSTICK_Callback(void){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	BUZZER_Handler();
 8001bc4:	f7ff fbc8 	bl	8001358 <BUZZER_Handler>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 8001be2:	f107 020f 	add.w	r2, r7, #15
 8001be6:	1df9      	adds	r1, r7, #7
 8001be8:	2364      	movs	r3, #100	; 0x64
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <RC522_SPI_Transfer+0x28>)
 8001bf0:	f001 fb7b 	bl	80032ea <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200000a4 	.word	0x200000a4

08001c04 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2110      	movs	r1, #16
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <Write_MFRC522+0x48>)
 8001c1a:	f000 fe5f 	bl	80028dc <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ffd4 	bl	8001bd8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ffd0 	bl	8001bd8 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <Write_MFRC522+0x48>)
 8001c3e:	f000 fe4d 	bl	80028dc <HAL_GPIO_WritePin>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020800 	.word	0x40020800

08001c50 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <Read_MFRC522+0x4c>)
 8001c60:	f000 fe3c 	bl	80028dc <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ffad 	bl	8001bd8 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff ffaa 	bl	8001bd8 <RC522_SPI_Transfer>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <Read_MFRC522+0x4c>)
 8001c8e:	f000 fe25 	bl	80028dc <HAL_GPIO_WritePin>
	return val;	
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffcc 	bl	8001c50 <Read_MFRC522>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff9b 	bl	8001c04 <Write_MFRC522>
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460a      	mov	r2, r1
 8001ce0:	71fb      	strb	r3, [r7, #7]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffb1 	bl	8001c50 <Read_MFRC522>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001cf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	b25a      	sxtb	r2, r3
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff7b 	bl	8001c04 <Write_MFRC522>
} 
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 8001d1a:	2014      	movs	r0, #20
 8001d1c:	f7ff ff98 	bl	8001c50 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 8001d20:	2103      	movs	r1, #3
 8001d22:	2014      	movs	r0, #20
 8001d24:	f7ff ffbc 	bl	8001ca0 <SetBitMask>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001d30:	210f      	movs	r1, #15
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff ff66 	bl	8001c04 <Write_MFRC522>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8001d40:	2201      	movs	r2, #1
 8001d42:	2110      	movs	r1, #16
 8001d44:	4812      	ldr	r0, [pc, #72]	; (8001d90 <MFRC522_Init+0x54>)
 8001d46:	f000 fdc9 	bl	80028dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <MFRC522_Init+0x58>)
 8001d50:	f000 fdc4 	bl	80028dc <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 8001d54:	f7ff ffea 	bl	8001d2c <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8001d58:	218d      	movs	r1, #141	; 0x8d
 8001d5a:	202a      	movs	r0, #42	; 0x2a
 8001d5c:	f7ff ff52 	bl	8001c04 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001d60:	213e      	movs	r1, #62	; 0x3e
 8001d62:	202b      	movs	r0, #43	; 0x2b
 8001d64:	f7ff ff4e 	bl	8001c04 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8001d68:	211e      	movs	r1, #30
 8001d6a:	202d      	movs	r0, #45	; 0x2d
 8001d6c:	f7ff ff4a 	bl	8001c04 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001d70:	2100      	movs	r1, #0
 8001d72:	202c      	movs	r0, #44	; 0x2c
 8001d74:	f7ff ff46 	bl	8001c04 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	2015      	movs	r0, #21
 8001d7c:	f7ff ff42 	bl	8001c04 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8001d80:	213d      	movs	r1, #61	; 0x3d
 8001d82:	2011      	movs	r0, #17
 8001d84:	f7ff ff3e 	bl	8001c04 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8001d88:	f7ff ffc5 	bl	8001d16 <AntennaOn>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020000 	.word	0x40020000

08001d98 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	4613      	mov	r3, r2
 8001da8:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8001daa:	2302      	movs	r3, #2
 8001dac:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d006      	beq.n	8001dca <MFRC522_ToCard+0x32>
 8001dbc:	2b0e      	cmp	r3, #14
 8001dbe:	d109      	bne.n	8001dd4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8001dc0:	2312      	movs	r3, #18
 8001dc2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	777b      	strb	r3, [r7, #29]
			break;
 8001dc8:	e005      	b.n	8001dd6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8001dca:	2377      	movs	r3, #119	; 0x77
 8001dcc:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001dce:	2330      	movs	r3, #48	; 0x30
 8001dd0:	777b      	strb	r3, [r7, #29]
			break;
 8001dd2:	e000      	b.n	8001dd6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001dd4:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 8001dd6:	7fbb      	ldrb	r3, [r7, #30]
 8001dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff ff0f 	bl	8001c04 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	2004      	movs	r0, #4
 8001dea:	f7ff ff74 	bl	8001cd6 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	200a      	movs	r0, #10
 8001df2:	f7ff ff55 	bl	8001ca0 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8001df6:	2100      	movs	r1, #0
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff ff03 	bl	8001c04 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e00a      	b.n	8001e1a <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2009      	movs	r0, #9
 8001e10:	f7ff fef8 	bl	8001c04 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d3f0      	bcc.n	8001e04 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff feec 	bl	8001c04 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d103      	bne.n	8001e3a <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	200d      	movs	r0, #13
 8001e36:	f7ff ff33 	bl	8001ca0 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8001e3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e3e:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001e40:	2004      	movs	r0, #4
 8001e42:	f7ff ff05 	bl	8001c50 <Read_MFRC522>
 8001e46:	4603      	mov	r3, r0
 8001e48:	773b      	strb	r3, [r7, #28]
        i--;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <MFRC522_ToCard+0xd4>
 8001e56:	7f3b      	ldrb	r3, [r7, #28]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <MFRC522_ToCard+0xd4>
 8001e60:	7f3a      	ldrb	r2, [r7, #28]
 8001e62:	7f7b      	ldrb	r3, [r7, #29]
 8001e64:	4013      	ands	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0e9      	beq.n	8001e40 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff ff31 	bl	8001cd6 <ClearBitMask>
	
    if (i != 0)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d052      	beq.n	8001f20 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001e7a:	2006      	movs	r0, #6
 8001e7c:	f7ff fee8 	bl	8001c50 <Read_MFRC522>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 031b 	and.w	r3, r3, #27
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d148      	bne.n	8001f1c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001e8e:	7f3a      	ldrb	r2, [r7, #28]
 8001e90:	7fbb      	ldrb	r3, [r7, #30]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d13b      	bne.n	8001f20 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f7ff fed1 	bl	8001c50 <Read_MFRC522>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001eb2:	200c      	movs	r0, #12
 8001eb4:	f7ff fecc 	bl	8001c50 <Read_MFRC522>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8001ec6:	7f3b      	ldrb	r3, [r7, #28]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	00da      	lsls	r2, r3, #3
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	4413      	add	r3, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e004      	b.n	8001ee2 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001ed8:	7f3b      	ldrb	r3, [r7, #28]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001ee2:	7f3b      	ldrb	r3, [r7, #28]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001ee8:	2301      	movs	r3, #1
 8001eea:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001eec:	7f3b      	ldrb	r3, [r7, #28]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d901      	bls.n	8001ef6 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	e00a      	b.n	8001f12 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	18d4      	adds	r4, r2, r3
 8001f02:	2009      	movs	r0, #9
 8001f04:	f7ff fea4 	bl	8001c50 <Read_MFRC522>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	7f3b      	ldrb	r3, [r7, #28]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3f0      	bcc.n	8001efc <MFRC522_ToCard+0x164>
 8001f1a:	e001      	b.n	8001f20 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}

08001f2a <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	4603      	mov	r3, r0
 8001f32:	6039      	str	r1, [r7, #0]
 8001f34:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001f36:	2107      	movs	r1, #7
 8001f38:	200d      	movs	r0, #13
 8001f3a:	f7ff fe63 	bl	8001c04 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	200c      	movs	r0, #12
 8001f52:	f7ff ff21 	bl	8001d98 <MFRC522_ToCard>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <MFRC522_Request+0x3c>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d001      	beq.n	8001f6a <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8001f66:	2302      	movs	r3, #2
 8001f68:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	200d      	movs	r0, #13
 8001f84:	f7ff fe3e 	bl	8001c04 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2293      	movs	r2, #147	; 0x93
 8001f8c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3301      	adds	r3, #1
 8001f92:	2220      	movs	r2, #32
 8001f94:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	200c      	movs	r0, #12
 8001fa4:	f7ff fef8 	bl	8001d98 <MFRC522_ToCard>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73bb      	strb	r3, [r7, #14]
 8001fb6:	e009      	b.n	8001fcc <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	4053      	eors	r3, r2
 8001fc4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	73bb      	strb	r3, [r7, #14]
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9f2      	bls.n	8001fb8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	7b7a      	ldrb	r2, [r7, #13]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_SPI_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12b      	bne.n	80020ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 800206c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_SPI_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800209a:	23e0      	movs	r3, #224	; 0xe0
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020aa:	2305      	movs	r3, #5
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <HAL_SPI_MspInit+0x8c>)
 80020b6:	f000 fa5d 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40013000 	.word	0x40013000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_TIM_Base_MspInit+0x64>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020fe:	e012      	b.n	8002126 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d10d      	bne.n	8002126 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_TIM_Base_MspInit+0x68>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010000 	.word	0x40010000
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d11d      	bne.n	800219a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_TIM_MspPostInit+0x68>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_TIM_MspPostInit+0x68>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_TIM_MspPostInit+0x68>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800217a:	2308      	movs	r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	4619      	mov	r1, r3
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <HAL_TIM_MspPostInit+0x6c>)
 8002196:	f000 f9ed 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 HAL_SYSTICK_Callback();
 80021f8:	f7ff fce2 	bl	8001bc0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f890 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002252:	f7ff ffd7 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f002 f9a5 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff f8ad 	bl	80013b8 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800226c:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 8002270:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002274:	200001dc 	.word	0x200001dc

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f931 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fe9e 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f93b 	bl	800255a <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f911 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000040 	.word	0x20000040
 8002318:	20000048 	.word	0x20000048
 800231c:	20000044 	.word	0x20000044

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000048 	.word	0x20000048
 8002344:	200001d8 	.word	0x200001d8

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200001d8 	.word	0x200001d8

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000048 	.word	0x20000048

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff47 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff5c 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffb0 	bl	80024c8 <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e16b      	b.n	8002868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 815a 	bne.w	8002862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80b4 	beq.w	8002862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_GPIO_Init+0x30c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_GPIO_Init+0x310>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x314>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02b      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x318>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x31c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x324>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x328>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x32c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x20a>
 800277a:	2307      	movs	r3, #7
 800277c:	e00e      	b.n	800279c <HAL_GPIO_Init+0x228>
 800277e:	2308      	movs	r3, #8
 8002780:	e00c      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002782:	2306      	movs	r3, #6
 8002784:	e00a      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002786:	2305      	movs	r3, #5
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278a:	2304      	movs	r3, #4
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x228>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x310>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f ae90 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40021400 	.word	0x40021400
 80028a0:	40021800 	.word	0x40021800
 80028a4:	40021c00 	.word	0x40021c00
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e001      	b.n	80028ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f8:	e003      	b.n	8002902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e267      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d075      	beq.n	8002a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00c      	beq.n	8002954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	2b08      	cmp	r3, #8
 8002944:	d112      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x108>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d157      	bne.n	8002a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e242      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x74>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6f      	ldr	r2, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fcbe 	bl	8002348 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff fcba 	bl	8002348 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e207      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff fcaa 	bl	8002348 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff fca6 	bl	8002348 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1f3      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0xe8>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d063      	beq.n	8002aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1c7      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4937      	ldr	r1, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e03a      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7ff fc5f 	bl	8002348 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fc5b 	bl	8002348 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1a8      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	e015      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fc3e 	bl	8002348 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fc3a 	bl	8002348 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e187      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d036      	beq.n	8002b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fc1e 	bl	8002348 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b10:	f7ff fc1a 	bl	8002348 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e167      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x200>
 8002b2e:	e01b      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff fc07 	bl	8002348 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00e      	b.n	8002b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7ff fc03 	bl	8002348 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d907      	bls.n	8002b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e150      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	42470000 	.word	0x42470000
 8002b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ea      	bne.n	8002b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8097 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fbc3 	bl	8002348 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7ff fbbf 	bl	8002348 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e10c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2ea>
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x30c>
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002c1c:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fb84 	bl	8002348 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7ff fb80 	bl	8002348 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0cb      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7ff fb6e 	bl	8002348 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7ff fb6a 	bl	8002348 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0b5      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1ee      	bne.n	8002c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c98:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a1 	beq.w	8002df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d05c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d141      	bne.n	8002d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fb3e 	bl	8002348 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff fb3a 	bl	8002348 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e087      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	491b      	ldr	r1, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fb13 	bl	8002348 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff fb0f 	bl	8002348 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e05c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x416>
 8002d44:	e054      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fafc 	bl	8002348 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7ff faf8 	bl	8002348 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e045      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e038      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4ec>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d028      	beq.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11a      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cc      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90c      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0b8      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d044      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d119      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e067      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4934      	ldr	r1, [pc, #208]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7ff fa2a 	bl	8002348 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7ff fa26 	bl	8002348 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d20c      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e032      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4916      	ldr	r1, [pc, #88]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f86:	f000 f821 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	490a      	ldr	r1, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	5ccb      	ldrb	r3, [r1, r3]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f98a 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	08004654 	.word	0x08004654
 8002fc4:	20000040 	.word	0x20000040
 8002fc8:	20000044 	.word	0x20000044

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b094      	sub	sp, #80	; 0x50
 8002fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fdc:	2300      	movs	r3, #0
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d00d      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x40>
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	f200 80e1 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ffe:	e0db      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b73      	ldr	r3, [pc, #460]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003004:	e0db      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300a:	e0d8      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800300c:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003016:	4b6d      	ldr	r3, [pc, #436]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d063      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
 800302c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
 8003036:	2300      	movs	r3, #0
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
 800303a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800303e:	4622      	mov	r2, r4
 8003040:	462b      	mov	r3, r5
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	0159      	lsls	r1, r3, #5
 800304c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003050:	0150      	lsls	r0, r2, #5
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4621      	mov	r1, r4
 8003058:	1a51      	subs	r1, r2, r1
 800305a:	6139      	str	r1, [r7, #16]
 800305c:	4629      	mov	r1, r5
 800305e:	eb63 0301 	sbc.w	r3, r3, r1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003070:	4659      	mov	r1, fp
 8003072:	018b      	lsls	r3, r1, #6
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800307a:	4651      	mov	r1, sl
 800307c:	018a      	lsls	r2, r1, #6
 800307e:	4651      	mov	r1, sl
 8003080:	ebb2 0801 	subs.w	r8, r2, r1
 8003084:	4659      	mov	r1, fp
 8003086:	eb63 0901 	sbc.w	r9, r3, r1
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309e:	4690      	mov	r8, r2
 80030a0:	4699      	mov	r9, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	eb18 0303 	adds.w	r3, r8, r3
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	462b      	mov	r3, r5
 80030ac:	eb49 0303 	adc.w	r3, r9, r3
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030be:	4629      	mov	r1, r5
 80030c0:	024b      	lsls	r3, r1, #9
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c8:	4621      	mov	r1, r4
 80030ca:	024a      	lsls	r2, r1, #9
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d2:	2200      	movs	r2, #0
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030dc:	f7fd fc62 	bl	80009a4 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	e058      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	099b      	lsrs	r3, r3, #6
 80030f0:	2200      	movs	r2, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	4611      	mov	r1, r2
 80030f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	f04f 0000 	mov.w	r0, #0
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	0159      	lsls	r1, r3, #5
 8003112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003116:	0150      	lsls	r0, r2, #5
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4641      	mov	r1, r8
 800311e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003122:	4649      	mov	r1, r9
 8003124:	eb63 0b01 	sbc.w	fp, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800313c:	ebb2 040a 	subs.w	r4, r2, sl
 8003140:	eb63 050b 	sbc.w	r5, r3, fp
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	00eb      	lsls	r3, r5, #3
 800314e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003152:	00e2      	lsls	r2, r4, #3
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4643      	mov	r3, r8
 800315a:	18e3      	adds	r3, r4, r3
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	464b      	mov	r3, r9
 8003160:	eb45 0303 	adc.w	r3, r5, r3
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003172:	4629      	mov	r1, r5
 8003174:	028b      	lsls	r3, r1, #10
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800317c:	4621      	mov	r1, r4
 800317e:	028a      	lsls	r2, r1, #10
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	61fa      	str	r2, [r7, #28]
 800318c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003190:	f7fd fc08 	bl	80009a4 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_GetSysClockFreq+0x200>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	3301      	adds	r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3750      	adds	r7, #80	; 0x50
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07b      	b.n	80032e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fa:	d009      	beq.n	8003210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
 8003202:	e005      	b.n	8003210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe ff08 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003246:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	ea42 0103 	orr.w	r1, r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	f003 0104 	and.w	r1, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0210 	and.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08c      	sub	sp, #48	; 0x30
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x26>
 800330c:	2302      	movs	r3, #2
 800330e:	e18a      	b.n	8003626 <HAL_SPI_TransmitReceive+0x33c>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003318:	f7ff f816 	bl	8002348 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003336:	2b01      	cmp	r3, #1
 8003338:	d00f      	beq.n	800335a <HAL_SPI_TransmitReceive+0x70>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003340:	d107      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x68>
 800334a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334e:	2b04      	cmp	r3, #4
 8003350:	d003      	beq.n	800335a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003358:	e15b      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_SPI_TransmitReceive+0x82>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SPI_TransmitReceive+0x82>
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003372:	e14e      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b04      	cmp	r3, #4
 800337e:	d003      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2205      	movs	r2, #5
 8003384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	887a      	ldrh	r2, [r7, #2]
 800339e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d007      	beq.n	80033dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e4:	d178      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x10a>
 80033ee:	8b7b      	ldrh	r3, [r7, #26]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d166      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003418:	e053      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x176>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x176>
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d113      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	1c9a      	adds	r2, r3, #2
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d119      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x1b8>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	b292      	uxth	r2, r2
 8003484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800349e:	2301      	movs	r3, #1
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034a2:	f7fe ff51 	bl	8002348 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d807      	bhi.n	80034c2 <HAL_SPI_TransmitReceive+0x1d8>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d003      	beq.n	80034c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034c0:	e0a7      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1a6      	bne.n	800341a <HAL_SPI_TransmitReceive+0x130>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1a1      	bne.n	800341a <HAL_SPI_TransmitReceive+0x130>
 80034d6:	e07c      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_TransmitReceive+0x1fc>
 80034e0:	8b7b      	ldrh	r3, [r7, #26]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d16b      	bne.n	80035be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350c:	e057      	b.n	80035be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d11c      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x26c>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x26c>
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d114      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d119      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x2ae>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d014      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003594:	2301      	movs	r3, #1
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003598:	f7fe fed6 	bl	8002348 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d803      	bhi.n	80035b0 <HAL_SPI_TransmitReceive+0x2c6>
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x2cc>
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035bc:	e029      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1a2      	bne.n	800350e <HAL_SPI_TransmitReceive+0x224>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d19d      	bne.n	800350e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8b2 	bl	8003740 <SPI_EndRxTxTransaction>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035ee:	e010      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	e000      	b.n	8003612 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003610:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003622:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003626:	4618      	mov	r0, r3
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003640:	f7fe fe82 	bl	8002348 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	4413      	add	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003650:	f7fe fe7a 	bl	8002348 <HAL_GetTick>
 8003654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	015b      	lsls	r3, r3, #5
 800365c:	0d1b      	lsrs	r3, r3, #20
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003666:	e054      	b.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d050      	beq.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003670:	f7fe fe6a 	bl	8002348 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	429a      	cmp	r2, r3
 800367e:	d902      	bls.n	8003686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d13d      	bne.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800369e:	d111      	bne.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a8:	d004      	beq.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d107      	bne.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036cc:	d10f      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e017      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3b01      	subs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	429a      	cmp	r2, r3
 800372e:	d19b      	bne.n	8003668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000040 	.word	0x20000040

08003740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <SPI_EndRxTxTransaction+0x7c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <SPI_EndRxTxTransaction+0x80>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0d5b      	lsrs	r3, r3, #21
 8003758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d112      	bne.n	8003792 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ff5a 	bl	8003630 <SPI_WaitFlagStateUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e00f      	b.n	80037b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d0f2      	beq.n	8003792 <SPI_EndRxTxTransaction+0x52>
 80037ac:	e000      	b.n	80037b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80037ae:	bf00      	nop
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000040 	.word	0x20000040
 80037c0:	165e9f81 	.word	0x165e9f81

080037c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e041      	b.n	800385a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fe fc70 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f000 fb42 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e046      	b.n	800390a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a23      	ldr	r2, [pc, #140]	; (8003918 <HAL_TIM_Base_Start+0xb4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d01d      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_TIM_Base_Start+0xb8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_TIM_Base_Start+0xbc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_TIM_Base_Start+0xc0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIM_Base_Start+0xc4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_TIM_Base_Start+0xc8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_Base_Start+0x70>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIM_Base_Start+0xcc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d010      	beq.n	8003908 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	e007      	b.n	8003908 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40001800 	.word	0x40001800

08003934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e041      	b.n	80039ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f839 	bl	80039d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fa8a 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x24>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e022      	b.n	8003a52 <HAL_TIM_PWM_Start+0x6a>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d109      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x3e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e015      	b.n	8003a52 <HAL_TIM_PWM_Start+0x6a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d109      	bne.n	8003a40 <HAL_TIM_PWM_Start+0x58>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_PWM_Start+0x6a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07c      	b.n	8003b54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start+0x82>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	e013      	b.n	8003a92 <HAL_TIM_PWM_Start+0xaa>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x92>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	e00b      	b.n	8003a92 <HAL_TIM_PWM_Start+0xaa>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0xa2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	e003      	b.n	8003a92 <HAL_TIM_PWM_Start+0xaa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	6839      	ldr	r1, [r7, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fce0 	bl	8004460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2d      	ldr	r2, [pc, #180]	; (8003b5c <HAL_TIM_PWM_Start+0x174>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0xcc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <HAL_TIM_PWM_Start+0x178>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_PWM_Start+0xd0>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_TIM_PWM_Start+0xd2>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_TIM_PWM_Start+0x174>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d01d      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_TIM_PWM_Start+0x17c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_TIM_PWM_Start+0x180>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_TIM_PWM_Start+0x184>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_TIM_PWM_Start+0x178>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_TIM_PWM_Start+0x188>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x136>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_TIM_PWM_Start+0x18c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d111      	bne.n	8003b42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d010      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b40:	e007      	b.n	8003b52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40010400 	.word	0x40010400
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40001800 	.word	0x40001800

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0ae      	b.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	f200 809f 	bhi.w	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003ce5 	.word	0x08003ce5
 8003bb4:	08003ce5 	.word	0x08003ce5
 8003bb8:	08003ce5 	.word	0x08003ce5
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003ce5 	.word	0x08003ce5
 8003bc4:	08003ce5 	.word	0x08003ce5
 8003bc8:	08003ce5 	.word	0x08003ce5
 8003bcc:	08003c63 	.word	0x08003c63
 8003bd0:	08003ce5 	.word	0x08003ce5
 8003bd4:	08003ce5 	.word	0x08003ce5
 8003bd8:	08003ce5 	.word	0x08003ce5
 8003bdc:	08003ca3 	.word	0x08003ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f9f0 	bl	8003fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	619a      	str	r2, [r3, #24]
      break;
 8003c1e:	e064      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa40 	bl	80040ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]
      break;
 8003c60:	e043      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fa95 	bl	8004198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0208 	orr.w	r2, r2, #8
 8003c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0204 	bic.w	r2, r2, #4
 8003c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
      break;
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fae9 	bl	8004280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	021a      	lsls	r2, r3, #8
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	61da      	str	r2, [r3, #28]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b4      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x186>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_TIM_ConfigClockSource+0x172>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x11a>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x13a>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f000 fb35 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04f      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fb1e 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 fa92 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 faeb 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 fab1 	bl	800438a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	; 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fadb 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fa72 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 facb 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fac2 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <TIM_Base_SetConfig+0x118>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <TIM_Base_SetConfig+0x11c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	; (8003fac <TIM_Base_SetConfig+0x120>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d027      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <TIM_Base_SetConfig+0x118>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d023      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <TIM_Base_SetConfig+0x11c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <TIM_Base_SetConfig+0x120>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d017      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <TIM_Base_SetConfig+0x128>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <TIM_Base_SetConfig+0x12c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00f      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <TIM_Base_SetConfig+0x130>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <TIM_Base_SetConfig+0x134>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <TIM_Base_SetConfig+0x138>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <TIM_Base_SetConfig+0x13c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d108      	bne.n	8003f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0xf8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800
 8003fc0:	40001800 	.word	0x40001800
 8003fc4:	40001c00 	.word	0x40001c00
 8003fc8:	40002000 	.word	0x40002000

08003fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 0302 	bic.w	r3, r3, #2
 8004014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <TIM_OC1_SetConfig+0xd8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC1_SetConfig+0x64>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <TIM_OC1_SetConfig+0xdc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0308 	bic.w	r3, r3, #8
 8004036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <TIM_OC1_SetConfig+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC1_SetConfig+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <TIM_OC1_SetConfig+0xdc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40010400 	.word	0x40010400

080040ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0320 	bic.w	r3, r3, #32
 80040f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x68>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a21      	ldr	r2, [pc, #132]	; (8004194 <TIM_OC2_SetConfig+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10d      	bne.n	8004130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <TIM_OC2_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0x94>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <TIM_OC2_SetConfig+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d113      	bne.n	8004168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400

08004198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <TIM_OC3_SetConfig+0xe0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x66>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10d      	bne.n	800421a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <TIM_OC3_SetConfig+0xe0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0x92>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <TIM_OC3_SetConfig+0xe4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <TIM_OC4_SetConfig+0xa4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC4_SetConfig+0x68>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a11      	ldr	r2, [pc, #68]	; (8004328 <TIM_OC4_SetConfig+0xa8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e05a      	b.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a21      	ldr	r2, [pc, #132]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d01d      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40001800 	.word	0x40001800

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4d0d      	ldr	r5, [pc, #52]	; (80045dc <__libc_init_array+0x38>)
 80045a8:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <__libc_init_array+0x3c>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	2600      	movs	r6, #0
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	4d0b      	ldr	r5, [pc, #44]	; (80045e4 <__libc_init_array+0x40>)
 80045b6:	4c0c      	ldr	r4, [pc, #48]	; (80045e8 <__libc_init_array+0x44>)
 80045b8:	f000 f820 	bl	80045fc <_init>
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	2600      	movs	r6, #0
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	0800466c 	.word	0x0800466c
 80045e0:	0800466c 	.word	0x0800466c
 80045e4:	0800466c 	.word	0x0800466c
 80045e8:	08004670 	.word	0x08004670

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
